pkg-config(1)                                            General Commands Manual                                           pkg-config(1)

NNAAMMEE
       pkg-config - Return metainformation about installed libraries

SSYYNNOOPPSSIISS
       ppkkgg--ccoonnffiigg  [--modversion]  [--version]  [--help]  [--atleast-pkgconfig-version=VERSION] [--print-errors] [--short-errors] [--si‐
       lence-errors] [--errors-to-stdout] [--debug] [--cflags] [--libs] [--libs-only-L] [--libs-only-l] [--cflags-only-I]  [--libs-only-
       other]   [--cflags-only-other]   [--variable=VARIABLENAME]   [--define-variable=VARIABLENAME=VARIABLEVALUE]   [--print-variables]
       [--uninstalled]   [--exists]   [--atleast-version=VERSION]   [--exact-version=VERSION]    [--max-version=VERSION]    [--validate]
       [--list-all] [--print-provides] [--print-requires] [--print-requires-private] [LIBRARIES...]

DDEESSCCRRIIPPTTIIOONN
       The  _p_k_g_-_c_o_n_f_i_g program is used to retrieve information about installed libraries in the system.  It is typically used to compile
       and link against one or more libraries.  Here is a typical usage scenario in a Makefile:

       program: program.c
            cc program.c `pkg-config --cflags --libs gnomeui`

       _p_k_g_-_c_o_n_f_i_g retrieves information about packages from special metadata files. These files are named after the package, and  has  a
       _._p_c  extension.   On  most  systems,  _p_k_g_-_c_o_n_f_i_g  looks in _/_u_s_r_/_l_i_b_/_p_k_g_c_o_n_f_i_g_, _/_u_s_r_/_s_h_a_r_e_/_p_k_g_c_o_n_f_i_g_, _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_p_k_g_c_o_n_f_i_g and
       _/_u_s_r_/_l_o_c_a_l_/_s_h_a_r_e_/_p_k_g_c_o_n_f_i_g for these files.  It will additionally look in the colon-separated (on  Windows,  semicolon-separated)
       list of directories specified by the PKG_CONFIG_PATH environment variable.

       The  package  name  specified on the _p_k_g_-_c_o_n_f_i_g command line is defined to be the name of the metadata file, minus the _._p_c exten‐
       sion. If a library can install multiple versions simultaneously, it must give each version its own name  (for  example,  GTK  1.2
       might have the package name "gtk+" while GTK 2.0 has "gtk+-2.0").

       In addition to specifying a package name on the command line, the full path to a given _._p_c file may be given instead. This allows
       a user to directly query a particular _._p_c file.

OOPPTTIIOONNSS
       The following options are supported:

       _-_-_m_o_d_v_e_r_s_i_o_n
              Requests that the version information of the libraries specified on the command line be displayed.  If _p_k_g_-_c_o_n_f_i_g can find
              all  the  libraries on the command line, each library's version string is printed to stdout, one version per line. In this
              case _p_k_g_-_c_o_n_f_i_g exits successfully. If one or more libraries is unknown, _p_k_g_-_c_o_n_f_i_g exits with a  nonzero  code,  and  the
              contents of stdout are undefined.

       _-_-_v_e_r_s_i_o_n
              Displays the version of _p_k_g_-_c_o_n_f_i_g and terminates.

       _-_-_a_t_l_e_a_s_t_-_p_k_g_c_o_n_f_i_g_-_v_e_r_s_i_o_n_=_V_E_R_S_I_O_N
              Requires at least the given version of pkg-config.

       _-_-_h_e_l_p Displays a help message and terminates.

       _-_-_p_r_i_n_t_-_e_r_r_o_r_s
              If  one or more of the modules on the command line, or their dependencies, are not found, or if an error occurs in parsing
              a _._p_c file, then this option will cause errors explaining the problem to be printed.  With  "predicate"  options  such  as
              "--exists"  _p_k_g_-_c_o_n_f_i_g  runs silently by default, because it's usually used in scripts that want to control what's output.
              This option can be used alone (to just print errors encountered locating modules on the command line) or  with  other  op‐
              tions. The PKG_CONFIG_DEBUG_SPEW environment variable overrides this option.

       _-_-_s_h_o_r_t_-_e_r_r_o_r_s
              Print short error messages.

       _-_-_s_i_l_e_n_c_e_-_e_r_r_o_r_s
              If  one or more of the modules on the command line, or their dependencies, are not found, or if an error occurs in parsing
              a a _._p_c file, then this option will keep errors explaining the problem from being printed. With "predicate"  options  such
              as  "--exists"  _p_k_g_-_c_o_n_f_i_g runs silently by default, because it's usually used in scripts that want to control what's out‐
              put. So this option is only useful with options such as "--cflags" or "--modversion" that print  errors  by  default.  The
              PKG_CONFIG_DEBUG_SPEW environment variable overrides this option.

       _-_-_e_r_r_o_r_s_-_t_o_-_s_t_d_o_u_t
              If printing errors, print them to stdout rather than the default stderr

       _-_-_d_e_b_u_g
              Print  debugging  information.  This is slightly different than the PKG_CONFIG_DEBUG_SPEW environment variable, which also
              enable "--print-errors".

       The following options are used to compile and link programs:

       _-_-_c_f_l_a_g_s
              This prints pre-processor and compile flags required to compile the packages on the command line, including flags for  all
              their  dependencies. Flags are "compressed" so that each identical flag appears only once. _p_k_g_-_c_o_n_f_i_g exits with a nonzero
              code if it can't find metadata for one or more of the packages on the command line.

       _-_-_c_f_l_a_g_s_-_o_n_l_y_-_I
              This prints the -I part of "--cflags". That is, it defines the header search path but doesn't specify anything else.

       _-_-_c_f_l_a_g_s_-_o_n_l_y_-_o_t_h_e_r
              This prints parts of "--cflags" not covered by "--cflags-only-I".

       _-_-_l_i_b_s This option is identical to "--cflags", only it prints the link flags. As with  "--cflags",  duplicate  flags  are  merged
              (maintaining proper ordering), and flags for dependencies are included in the output.

       _-_-_l_i_b_s_-_o_n_l_y_-_L
              This prints the -L/-R part of "--libs". That is, it defines the library search path but doesn't specify which libraries to
              link with.

       _-_-_l_i_b_s_-_o_n_l_y_-_l
              This prints the -l part of "--libs" for the libraries specified on the command line. Note that the union of  "--libs-only-
              l" and "--libs-only-L" may be smaller than "--libs", due to flags such as -rdynamic.

       _-_-_l_i_b_s_-_o_n_l_y_-_o_t_h_e_r
              This prints the parts of "--libs" not covered by "--libs-only-L" and "--libs-only-l", such as "--pthread".

       _-_-_v_a_r_i_a_b_l_e_=_V_A_R_I_A_B_L_E_N_A_M_E
              This  returns the value of a variable defined in a package's _._p_c file. Most packages define the variable "prefix", for ex‐
              ample, so you can say:
                $ pkg-config --variable=prefix glib-2.0
                /usr/

       _-_-_d_e_f_i_n_e_-_v_a_r_i_a_b_l_e_=_V_A_R_I_A_B_L_E_N_A_M_E_=_V_A_R_I_A_B_L_E_V_A_L_U_E
              This sets a global value for a variable, overriding the value in any _._p_c files. Most packages define  the  variable  "pre‐
              fix", for example, so you can say:
                $ pkg-config --print-errors --define-variable=prefix=/foo \
                             --variable=prefix glib-2.0
                /foo

       _-_-_p_r_i_n_t_-_v_a_r_i_a_b_l_e_s
              Returns a list of all variables defined in the package.

       _-_-_u_n_i_n_s_t_a_l_l_e_d
              Normally  if  you  request  the package "foo" and the package "foo-uninstalled" exists, _p_k_g_-_c_o_n_f_i_g will prefer the "-unin‐
              stalled" variant. This allows compilation/linking against uninstalled packages. If you specify the "--uninstalled" option,
              _p_k_g_-_c_o_n_f_i_g  will  return successfully if any "-uninstalled" packages are being used, and return failure (false) otherwise.
              (The PKG_CONFIG_DISABLE_UNINSTALLED environment variable keeps _p_k_g_-_c_o_n_f_i_g from implicitly  choosing  "-uninstalled"  pack‐
              ages,  so  if that variable is set, they will only have been used if you pass a name like "foo-uninstalled" on the command
              line explicitly.)

       _-_-_e_x_i_s_t_s

       _-_-_a_t_l_e_a_s_t_-_v_e_r_s_i_o_n_=_V_E_R_S_I_O_N

       _-_-_e_x_a_c_t_-_v_e_r_s_i_o_n_=_V_E_R_S_I_O_N

       _-_-_m_a_x_-_v_e_r_s_i_o_n_=_V_E_R_S_I_O_N
              These options test whether the package or list of packages on the command line are known  to  _p_k_g_-_c_o_n_f_i_g,  and  optionally
              whether  the  version number of a package meets certain constraints.  If all packages exist and meet the specified version
              constraints, _p_k_g_-_c_o_n_f_i_g exits successfully. Otherwise it exits unsuccessfully. Only the  first  VERSION  comparing  option
              will be honored. Subsequent options of this type will be ignored.

              Rather than using the version-test options, you can simply give a version constraint after each package name, for example:
                $ pkg-config --exists 'glib-2.0 >= 1.3.4 libxml = 1.8.3'
              Remember  to use --print-errors if you want error messages. When no output options are supplied to _p_k_g_-_c_o_n_f_i_g, --exists is
              implied.

       _-_-_v_a_l_i_d_a_t_e
              Checks the syntax of a package's _._p_c file for validity. This is the same as --exists except that dependencies are not ver‐
              ified. This can be useful for package developers to test their _._p_c file prior to release:
                $ pkg-config --validate ./my-package.pc

       _-_-_m_s_v_c_-_s_y_n_t_a_x
              This option is available only on Windows. It causes _p_k_g_-_c_o_n_f_i_g to output -l and -L flags in the form recognized by the Mi‐
              crosoft Visual C++ command-line compiler, _c_l. Specifically, instead of _-_L_x_:_/_s_o_m_e_/_p_a_t_h it prints _/_l_i_b_p_a_t_h_:_x_/_s_o_m_e_/_p_a_t_h,  and
              instead  of _-_l_f_o_o it prints _f_o_o_._l_i_b. Note that the --libs output consists of flags for the linker, and should be placed on
              the cl command line after a /link switch.

       _-_-_d_e_f_i_n_e_-_p_r_e_f_i_x
       _-_-_d_o_n_t_-_d_e_f_i_n_e_-_p_r_e_f_i_x
              These options control whether _p_k_g_-_c_o_n_f_i_g overrides the value of the variable _p_r_e_f_i_x in each .pc file.  With  --define-pre‐
              fix,  _p_k_g_-_c_o_n_f_i_g  uses  the installed location of the .pc file to determine the prefix. --dont-define-prefix prevents this
              behavior. The default is usually --define-prefix.

              When this feature is enabled and a .pc file is found in a directory named _p_k_g_c_o_n_f_i_g, the prefix for that  package  is  as‐
              sumed to be the grandparent of the directory where the file was found, and the _p_r_e_f_i_x variable is overridden for that file
              accordingly.

              If the value of a variable in a .pc file begins with the original, non-overridden, value of the _p_r_e_f_i_x variable, then  the
              overridden  value of _p_r_e_f_i_x is used instead. This allows the feature to work even when the variables have been expanded in
              the .pc file.

       _-_-_p_r_e_f_i_x_-_v_a_r_i_a_b_l_e_=_P_R_E_F_I_X
              Set the name of the variable that _p_k_g_-_c_o_n_f_i_g overrides instead of _p_r_e_f_i_x when using the --define-prefix feature.

       _-_-_s_t_a_t_i_c
              Output libraries suitable for static linking.  That means including any private libraries in the output.  This  relies  on
              proper tagging in the .pc files, else a too large number of libraries will ordinarily be output.

       _-_-_l_i_s_t_-_a_l_l
              List all modules found in the _p_k_g_-_c_o_n_f_i_g path.

       _-_-_p_r_i_n_t_-_p_r_o_v_i_d_e_s
              List all modules the given packages provides.

       _-_-_p_r_i_n_t_-_r_e_q_u_i_r_e_s
              List all modules the given packages requires.

       _-_-_p_r_i_n_t_-_r_e_q_u_i_r_e_s_-_p_r_i_v_a_t_e
              List all modules the given packages requires for static linking (see --static).

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       _P_K_G___C_O_N_F_I_G___P_A_T_H
              A  colon-separated  (on  Windows, semicolon-separated) list of directories to search for .pc files.  The default directory
              will always be searched after searching the path; the default is _l_i_b_d_i_r_/pkgconfig:_d_a_t_a_d_i_r/pkgconfig where  _l_i_b_d_i_r  is  the
              libdir for _p_k_g_-_c_o_n_f_i_g and _d_a_t_a_d_i_r is the datadir for _p_k_g_-_c_o_n_f_i_g when it was installed.

       _P_K_G___C_O_N_F_I_G___D_E_B_U_G___S_P_E_W
              If set, causes _p_k_g_-_c_o_n_f_i_g to print all kinds of debugging information and report all errors.

       _P_K_G___C_O_N_F_I_G___T_O_P___B_U_I_L_D___D_I_R
              A  value  to  set for the magic variable _p_c___t_o_p___b_u_i_l_d_d_i_r which may appear in _._p_c files. If the environment variable is not
              set, the default value '$(top_builddir)' will be used. This variable should refer to the  top  builddir  of  the  Makefile
              where  the  compile/link  flags  reported  by _p_k_g_-_c_o_n_f_i_g will be used.  This only matters when compiling/linking against a
              package that hasn't yet been installed.

       _P_K_G___C_O_N_F_I_G___D_I_S_A_B_L_E___U_N_I_N_S_T_A_L_L_E_D
              Normally if you request the package "foo" and the package "foo-uninstalled" exists, _p_k_g_-_c_o_n_f_i_g  will  prefer  the  "-unin‐
              stalled"  variant.  This allows compilation/linking against uninstalled packages.  If this environment variable is set, it
              disables said behavior.

       _P_K_G___C_O_N_F_I_G___S_Y_S_T_E_M___I_N_C_L_U_D_E___P_A_T_H
              A path variable containing system directories searched by the compiler.  This is normally _/_u_s_r_/_i_n_c_l_u_d_e.

       _C_P_A_T_H
       _C___I_N_C_L_U_D_E___P_A_T_H
       _C_P_L_U_S___I_N_C_L_U_D_E___P_A_T_H
              Additional paths to append to _P_K_G___C_O_N_F_I_G___S_Y_S_T_E_M___I_N_C_L_U_D_E___P_A_T_H.  These correspond to environment variables used by many com‐
              pilers to affect the header search path. These are ignored on Windows builds when --msvc-syntax is in use.

       _I_N_C_L_U_D_E
              Additional  paths  to append to _P_K_G___C_O_N_F_I_G___S_Y_S_T_E_M___I_N_C_L_U_D_E___P_A_T_H on Windows builds when --msvc-syntax is in use. This corre‐
              sponds to the environment variable used by MSVC to add directories to the include file search path.

       _P_K_G___C_O_N_F_I_G___A_L_L_O_W___S_Y_S_T_E_M___C_F_L_A_G_S
              Don't strip system paths out of Cflags. See _P_K_G___C_O_N_F_I_G___S_Y_S_T_E_M___I_N_C_L_U_D_E___P_A_T_H for the definition of system paths.

       _P_K_G___C_O_N_F_I_G___S_Y_S_T_E_M___L_I_B_R_A_R_Y___P_A_T_H
              A path variable containing system directories searched by the linker.  This is normally _/_u_s_r_/_l_i_b_:_/_l_i_b but is dependent  on
              the _p_k_g_-_c_o_n_f_i_g build and can contain other directories such as _/_u_s_r_/_l_i_b_6_4.

       _P_K_G___C_O_N_F_I_G___A_L_L_O_W___S_Y_S_T_E_M___L_I_B_S
              Don't strip system paths out of Libs. See _P_K_G___C_O_N_F_I_G___S_Y_S_T_E_M___L_I_B_R_A_R_Y___P_A_T_H for the definition of system paths.

       _P_K_G___C_O_N_F_I_G___S_Y_S_R_O_O_T___D_I_R
              Modify  -I  and  -L to use the directories located in target sysroot.  this option is useful when cross-compiling packages
              that use pkg-config to determine CFLAGS and LDFLAGS. -I and -L are modified to point to the new system  root.  this  means
              that a -I/usr/include/libfoo will become -I/var/target/usr/include/libfoo with a PKG_CONFIG_SYSROOT_DIR equal to /var/tar‐
              get (same rule apply to -L)

       _P_K_G___C_O_N_F_I_G___L_I_B_D_I_R
              Replaces the default _p_k_g_-_c_o_n_f_i_g search directory, usually _/_u_s_r_/_l_i_b_/_p_k_g_c_o_n_f_i_g:_/_u_s_r_/_s_h_a_r_e_/_p_k_g_c_o_n_f_i_g.

       _P_K_G___C_O_N_F_I_G___$_P_A_C_K_A_G_E___$_V_A_R_I_A_B_L_E
              Overrides the variable VARIABLE in the package PACKAGE. The environment variable should have the package name and  package
              variable   upper  cased  with  non-alphanumeric  characters  converted  to  underscores.  For  example,  setting  PKG_CON‐
              FIG_GLADEUI_2_0_CATALOGDIR will override the variable "catalogdir" in the "gladeui-2.0" package.

PPKKGG--CCOONNFFIIGG DDEERRIIVVEEDD VVAARRIIAABBLLEESS
       _p_k_g_-_c_o_n_f_i_g sets a few metadata variables that can be used in .pc files or queried at runtime.

       _p_c___p_a_t_h
              The default search path used by _p_k_g_-_c_o_n_f_i_g when searching for .pc files. This can be used in a query  for  the  _p_k_g_-_c_o_n_f_i_g
              module itself itself:
                $ pkg-config --variable pc_path pkg-config

       _p_c_f_i_l_e_d_i_r
              The  installed  location  of the .pc file. This can be used to query the location of the .pc file for a particular module,
              but it can also be used to make .pc files relocatable. For instance:
              prefix=${pcfiledir}/../..
              exec_prefix=${prefix}
              libdir=${exec_prefix}/lib
              includedir=${prefix}/include

       _p_c___s_y_s_r_o_o_t_d_i_r
              The sysroot directory set by the user. When the sysroot directory has not been set, this value is  _/.   See  the  _P_K_G___C_O_N_‐
              _F_I_G___S_Y_S_R_O_O_T___D_I_R environment variable for more details.

       _p_c___t_o_p___b_u_i_l_d_d_i_r
              Location  of  the  user's  top  build directory when calling _p_k_g_-_c_o_n_f_i_g_.  This is useful to dynamically set paths in unin‐
              stalled .pc files. See the _P_K_G___C_O_N_F_I_G___T_O_P___B_U_I_L_D___D_I_R environment variable for more details.

WWIINNDDOOWWSS SSPPEECCIIAALLIITTIIEESS
       The _p_k_g_-_c_o_n_f_i_g default search path is ignored on Windows. Instead, the search path is constructed by using the  installed  direc‐
       tory  of  _p_k_g_-_c_o_n_f_i_g  and then appending _l_i_b_\_p_k_g_c_o_n_f_i_g and _s_h_a_r_e_\_p_k_g_c_o_n_f_i_g.  This can be augmented or replaced using the standard
       environment variables described above.

AAUUTTOOCCOONNFF MMAACCRROOSS
       _P_K_G___C_H_E_C_K___M_O_D_U_L_E_S_(_V_A_R_I_A_B_L_E_-_P_R_E_F_I_X_, _M_O_D_U_L_E_S _[_,_A_C_T_I_O_N_-_I_F_-_F_O_U_N_D _[_,_A_C_T_I_O_N_-_I_F_-_N_O_T_-_F_O_U_N_D_]_]_)

              The macro PKG_CHECK_MODULES can be used in _c_o_n_f_i_g_u_r_e_._a_c to check whether modules exist. A typical usage would be:
               PKG_CHECK_MODULES([MYSTUFF], [gtk+-2.0 >= 1.3.5 libxml = 1.8.4])

              This would result in MYSTUFF_LIBS and MYSTUFF_CFLAGS substitution variables, set to the libs and cflags for the given mod‐
              ule list.  If a module is missing or has the wrong version, by default configure will abort with a message. To replace the
              default action, specify an ACTION-IF-NOT-FOUND. PKG_CHECK_MODULES will not print any error messages if  you  specify  your
              own  ACTION-IF-NOT-FOUND.   However,  it  will set the variable MYSTUFF_PKG_ERRORS, which you can use to display what went
              wrong.

              Note that if there is a possibility the first call to PKG_CHECK_MODULES might not happen, you should be sure to include an
              explicit call to PKG_PROG_PKG_CONFIG in your configure.ac.

              Also  note  that repeated usage of VARIABLE-PREFIX is not recommended.  After the first successful usage, subsequent calls
              with the same VARIABLE-PREFIX will simply use the _LIBS and _CFLAGS variables set from the previous usage without  calling
              _p_k_g_-_c_o_n_f_i_g again.

       _P_K_G___P_R_E_R_E_Q_(_M_I_N_-_V_E_R_S_I_O_N_)
              Checks  that  the  version  of the pkg-config autoconf macros in use is at least MIN-VERSION. This can be used to ensure a
              particular pkg-config macro will be available.

       _P_K_G___P_R_O_G___P_K_G___C_O_N_F_I_G_(_[_M_I_N_-_V_E_R_S_I_O_N_]_)

              Defines the PKG_CONFIG variable to the best pkg-config available, useful if you need pkg-config  but  don't  want  to  use
              PKG_CHECK_MODULES.

              If  the  first call to PKG_PROG_PKG_CONFIG is conditional, then it will not work correctly in all cases. Since many of the
              other  macros  such  as  PKG_CHECK_MODULES  require  PKG_PROG_PKG_CONFIG  to  know  which  pkg-config  program   to   run,
              PKG_PROG_PKG_CONFIG  may  be  run for the first time from a conditional from one of these macros. Therefore, if any of the
              pkg-config macros will be used under a conditional, it's best to run PKG_PROG_PKG_CONFIG before any of  the  other  macros
              are used.

       _P_K_G___C_H_E_C_K___M_O_D_U_L_E_S___S_T_A_T_I_C_(_V_A_R_I_A_B_L_E_-_P_R_E_F_I_X_, _M_O_D_U_L_E_S _[_,_A_C_T_I_O_N_-_I_F_-_F_O_U_N_D _[_,_A_C_T_I_O_N_-_I_F_-_N_O_T_-_F_O_U_N_D_]_]_)
              Enables static linking through --static prior to calling PKG_CHECK_MODULES.

       _P_K_G___C_H_E_C_K___E_X_I_S_T_S_(_M_O_D_U_L_E_S_, _[_A_C_T_I_O_N_-_I_F_-_F_O_U_N_D_]_, _[_A_C_T_I_O_N_-_I_F_-_N_O_T_-_F_O_U_N_D_]_)

              Check  to  see  whether a particular set of modules exists.  Similar to PKG_CHECK_MODULES(), but does not set variables or
              print errors.

              Similar to PKG_CHECK_MODULES, make sure that the first instance of this or PKG_CHECK_MODULES is called, or  make  sure  to
              call PKG_PROG_PKGCONFIG manually.

       _P_K_G___I_N_S_T_A_L_L_D_I_R_(_D_I_R_E_C_T_O_R_Y_)

              Substitutes  the  variable pkgconfigdir as the location where a module should install pkg-config .pc files. By default the
              directory is $libdir/pkgconfig, but the default can be changed by passing DIRECTORY.  The user can  override  through  the
              --with-pkgconfigdir parameter.

       _P_K_G___N_O_A_R_C_H___I_N_S_T_A_L_L_D_I_R_(_D_I_R_E_C_T_O_R_Y_)

              Substitutes the variable noarch_pkgconfigdir as the location where a module should install arch-independent pkg-config .pc
              files. By default the directory is $datadir/pkgconfig, but the default can be changed by passing DIRECTORY. The  user  can
              override through the --with-noarch-pkgconfigdir parameter.

       _P_K_G___C_H_E_C_K___V_A_R_(_V_A_R_I_A_B_L_E_, _M_O_D_U_L_E_, _C_O_N_F_I_G_-_V_A_R_I_A_B_L_E_, _[_A_C_T_I_O_N_-_I_F_-_F_O_U_N_D_]_, _[_A_C_T_I_O_N_-_I_F_-_N_O_T_-_F_O_U_N_D_]_)

              Retrieves  the  value of the pkg-config variable CONFIG-VARIABLE from MODULE and stores it in VARIABLE. Note that repeated
              usage of VARIABLE is not recommended as the check will be skipped if the variable is already set.

MMEETTAADDAATTAA FFIILLEE SSYYNNTTAAXX
       To add a library to the set of packages _p_k_g_-_c_o_n_f_i_g knows about, simply install a _._p_c file. You should install this file  to  _l_i_b_‐
       _d_i_r/pkgconfig.

       Here is an example file:
       # This is a comment
       prefix=/home/hp/unst   # this defines a variable
       exec_prefix=${prefix}  # defining another variable in terms of the first
       libdir=${exec_prefix}/lib
       includedir=${prefix}/include

       Name: GObject                            # human-readable name
       Description: Object/type system for GLib # human-readable description
       Version: 1.3.1
       URL: http://www.gtk.org
       Requires: glib-2.0 = 1.3.1
       Conflicts: foobar <= 4.5
       Libs: -L${libdir} -lgobject-1.3
       Libs.private: -lm
       Cflags: -I${includedir}/glib-2.0 -I${libdir}/glib/include

       You  would  normally  generate the file using configure, so that the prefix, etc. are set to the proper values.  The GNU Autoconf
       manual recommends generating files like .pc files at build time rather than configure time, so when you build the .pc file  is  a
       matter of taste and preference.

       Files  have  two  kinds of line: keyword lines start with a keyword plus a colon, and variable definitions start with an alphanu‐
       meric string plus an equals sign. Keywords are defined in advance and have special meaning to _p_k_g_-_c_o_n_f_i_g; variables do  not,  you
       can have any variables that you wish (however, users may expect to retrieve the usual directory name variables).

       Note that variable references are written "${foo}"; you can escape literal "${" as "$${".

       _N_a_m_e_:  This field should be a human-readable name for the package. Note that it is not the name passed as an argument to _p_k_g_-_c_o_n_‐
              _f_i_g.

       _D_e_s_c_r_i_p_t_i_o_n_:
              This should be a brief description of the package

       _U_R_L_:   An URL where people can get more information about and download the package

       _V_e_r_s_i_o_n_:
              This should be the most-specific-possible package version string.

       _R_e_q_u_i_r_e_s_:
              This is a comma-separated list of packages that are required by your package. Flags from dependent packages will be merged
              in  to the flags reported for your package. Optionally, you can specify the version of the required package (using the op‐
              erators =, <, >, >=, <=); specifying a version allows _p_k_g_-_c_o_n_f_i_g to perform extra sanity checks. You may only mention  the
              same  package one time on the _R_e_q_u_i_r_e_s_: line. If the version of a package is unspecified, any version will be used with no
              checking.

       _R_e_q_u_i_r_e_s_._p_r_i_v_a_t_e_:
              A list of packages required by this package. The difference from _R_e_q_u_i_r_e_s is that the packages listed under  _R_e_q_u_i_r_e_s_._p_r_i_‐
              _v_a_t_e  are  not  taken into account when a flag list is computed for dynamically linked executable (i.e., when --static was
              not specified).  In the situation where each .pc file corresponds to a library, _R_e_q_u_i_r_e_s_._p_r_i_v_a_t_e shall be used exclusively
              to specify the dependencies between the libraries.

       _C_o_n_f_l_i_c_t_s_:
              This  optional  line allows _p_k_g_-_c_o_n_f_i_g to perform additional sanity checks, primarily to detect broken user installations.
              The syntax is the same as _R_e_q_u_i_r_e_s_: except that you can list the same package more than once here, for example  "foobar  =
              1.2.3,  foobar  = 1.2.5, foobar >= 1.3", if you have reason to do so. If a version isn't specified, then your package con‐
              flicts with all versions of the mentioned package.  If a user tries to use your package and a conflicting package  at  the
              same time, then _p_k_g_-_c_o_n_f_i_g will complain.

       _L_i_b_s_:  This line should give the link flags specific to your package.  Don't add any flags for required packages; _p_k_g_-_c_o_n_f_i_g will
              add those automatically.

       _L_i_b_s_._p_r_i_v_a_t_e_:
              This line should list any private libraries in use.  Private libraries are libraries which are not  exposed  through  your
              library,  but are needed in the case of static linking. This differs from _R_e_q_u_i_r_e_s_._p_r_i_v_a_t_e in that it references libraries
              that do not have package files installed.

       _C_f_l_a_g_s_:
              This line should list the compile flags specific to your package.  Don't add any flags for required  packages;  _p_k_g_-_c_o_n_f_i_g
              will add those automatically.

AAUUTTHHOORR
       _p_k_g_-_c_o_n_f_i_g  was  written by James Henstridge, rewritten by Martijn van Beers, and rewritten again by Havoc Pennington. Tim Janik,
       Owen Taylor, and Raja Harinath submitted suggestions and some code.  _g_n_o_m_e_-_c_o_n_f_i_g was written by Miguel de Icaza,  Raja  Harinath
       and various hackers in the GNOME team.  It was inspired by Owen Taylor's _g_t_k_-_c_o_n_f_i_g program.

BBUUGGSS
       _p_k_g_-_c_o_n_f_i_g does not handle mixing of parameters with and without = well.  Stick with one.

       Bugs can be reported at http://bugs.freedesktop.org/ under the _p_k_g_-_c_o_n_f_i_g component.

                                                                                                                           pkg-config(1)
